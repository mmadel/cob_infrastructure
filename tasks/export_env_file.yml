---
# Required variables:
# - env_name
# - service_name

- name: Read plain service env from local clone
  set_fact:
    raw_service_env_lines: "{{ lookup('file', './cob-env-config/' ~ env_name ~ '/' ~ service_name ~ '/service-' ~ service_name ~ '.env').split('\n') }}"
  delegate_to: localhost
  run_once: true
  tags: export_env

- name: Initialize parsed_service_env
  set_fact:
    parsed_service_env: {}
  tags: export_env

- name: Parse service env to dict
  set_fact:
    parsed_service_env: "{{ parsed_service_env | combine({ item.split('=')[0]: item.split('=')[1] }) }}"
  loop: "{{ raw_service_env_lines | select('match', '^[^#\\s].*=.*$') }}"
  when: "'=' in item"
  delegate_to: localhost
  run_once: true
  tags: export_env

- name: Load service secrets
  include_vars:
    file: "./cob-env-config/{{ env_name }}/{{ service_name }}/service-{{ service_name }}-secrets.env.vault"
    name: service_secrets
  delegate_to: localhost
  run_once: true
  tags: export_env

- name: Ensure service directory exists
  file:
    path: "/opt/{{ service_name }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: true
  tags: export_env

- name: Ensure log directory exists
  file:
    path: "/var/log/{{ service_name }}"
    state: directory
    mode: '0755'
    owner: root
    group: root
  become: true
  tags: export_env

- name: Export merged env vars to /opt/{{ service_name }}/.env
  copy:
    dest: "/opt/{{ service_name }}/.env"
    content: |
      {% for key, value in parsed_service_env.items() %}
      {{ key }}={{ value }}
      {% endfor %}
      {% for key, value in service_secrets.items() %}
      {{ key }}={{ value }}
      {% endfor %}
    owner: root
    group: root
    mode: '0644'
  become: true
  tags: export_env

- name: Create systemd service file for {{ service_name }}
  template:
    src: "{{ service_name }}.service.j2"
    dest: "/etc/systemd/system/{{ service_name }}.service"
    owner: root
    group: root
    mode: '0644'
  become: true
  tags: service

- name: Reload systemd
  systemd:
    daemon_reload: yes
  become: true
  tags: service

- name: Enable {{ service_name }} service
  systemd:
    name: "{{ service_name }}"
    enabled: yes
  become: true
  tags: service

- name: Debug exported .env file (optional)
  shell: cat /opt/{{ service_name }}/.env
  register: env_file_output
  changed_when: false
  become: true
  tags: [debug, export_env]

- name: Show contents of exported .env file (optional)
  debug:
    var: env_file_output.stdout
  tags: [debug, export_env]
